helloworld::HelloRequest::InternalSerializeWithCachedSizesToArray(unsigned char*) const
helloworld::HelloRequest::ByteSizeLong() const

gRPC creates their own writer object called, ProtoBufferWriter that is a ZeroCopyOutputStream.
We need to see if this this is always used for communicating over the network.

ProtoBufferWriter used in GenericSerialize(). -- within proto_utils.h
GenericSerialize() used in SerializaationTraits<T>::Serialize() -- within proto_utils.h
SerializationTraits<T>::Serialize() used in a lambda of CallOpSendMessage::SendMessage() -- within call_op_set.h
    - the lamda takes a const void* as input
CallOpSendMessage object is usually used in a CallOpSet which is aggregated in two locations:
    1. In the single_buf variable of type CallOpSet -- within async_unary_call_impl.h
    2. In the write_ops_ variable of type CallOpSet -- within async_stream_impl.h
    3. *most important* In the ops variable of type CallOpSet -- within client_unary_call.h apart of BlockingUnaryCallImpl object.
The BlockingUnaryCallImpl object is created and used in wrapper function BlockingUnaryCall() -- within client_unary_call.h
BlockingUnaryCall() wrapper is used within the Client Side Stub::SayHello() method -- within helloworld.grpc.pb.cc, this is generated by Proto compiler.
SayHello() method is called from application layer in the clients main file.




In the proccout trace, I see that GenericSerialize() and GenericDeserialized() are called everytime for the marshalling
and unmarshalling of data. It does not look like anything else similar is called. So, these are called
right before the data is sent over the network. These exist in the proto_utils.h
Looking inside these functions, they call the ProtocolBuffers methods for serializing to an array or to an output stream.
So, I believe these are the transition points (endpoints) between gRPC and ProtocolBuffers.
